{"version":3,"file":"menu-stories-menu-stories.a6d21a9e.iframe.bundle.js","mappings":";;AA4BA;AAQA;;;AASA;AACA;AASA;;AAKA;;AC6FA;AAOA;AACA;AACA;AACA;AACA;;AAEA;;AArDA;;AAEA;;AAGA;;AAEA;AACA;AAEA;;AAkDA;;AA7IA;AAWA;AACA;AACA;AACA;AACA;AACA;AAUA;AAUA;AAIA;AAGA;AAWA;AAWA;;AA6EA","sources":["webpack://@spectrum-css/preview/../../components/divider/stories/template.js","webpack://@spectrum-css/preview/../../components/menu/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\nimport { upperCase, lowerCase, capitalize } from \"lodash-es\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Divider\",\n\tsize = \"m\",\n\ttag = \"hr\",\n\tstaticColor,\n\tvertical = false,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tif (tag === \"hr\") {\n\t\treturn html`\n    <hr\n      class=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${upperCase(size)}`]: typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n      style=${\n\t\t\t\tvertical === true\n\t\t\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t\t\t: \"\"\n\t\t\t}\n      role=\"separator\"\n      >\n    </hr>`;\n\t} else {\n\t\treturn html` <div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${vertical === true\n\t\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t\t: \"\"}\n\t\t\trole=\"separator\"\n\t\t></div>`;\n\t}\n};\n","import { html, css } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\n\nimport { Template as Divider } from \"@spectrum-css/divider/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const MenuItem = ({\n  rootClass,\n  label,\n  description,\n  iconName,\n  isHighlighted = false,\n  isActive = false,\n  isSelected = false,\n  isDisabled = false,\n  isChecked = false,\n  isFocused = false,\n  isDrillIn = false,\n  isCollapsible = false,\n  isOpen = false,\n  role = \"menuitem\",\n  items = [],\n  size,\n  id,\n  ...globals\n}) => html`\n    <li\n      class=${classMap({\n        [`${rootClass}`]: true,\n        \"is-highlighted\": isHighlighted,\n        \"is-active\": isActive,\n        \"is-focused\": isFocused,\n        \"is-selected\": isSelected,\n        \"is-disabled\": isDisabled,\n        [`${rootClass}--drillIn`]: isDrillIn,\n        [`${rootClass}--collapsible`]: isCollapsible,\n        \"is-open\": isOpen,\n      })}\n      id=${ifDefined(id)}\n      role=${ifDefined(role)}\n      aria-selected=${isSelected ? \"true\" : \"false\"}\n      aria-disabled=${isDisabled ? \"true\" : \"false\"}\n      tabindex=${ifDefined(!isDisabled ? \"0\" : undefined)}>\n      ${isCollapsible\n        ? Icon({\n            ...globals,\n            iconName: \"ChevronRight100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-chevron\",\n            ],\n          }) : ''}\n      ${iconName\n        ? Icon({\n            ...globals,\n            iconName,\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              `${rootClass}Icon--workflowIcon`\n            ] \n          }) : ''}\n      ${isCollapsible\n        ? html`<span class=\"spectrum-Menu-sectionHeading\">${label}</span>`\n        : html`<span class=\"${rootClass}Label\">${label}</span>`\n      }\n      ${typeof description != \"undefined\" \n        ? html`<span class=\"${rootClass}Description\">${description}</span>`\n        : ''}\n      ${isDrillIn\n        ? Icon({\n            ...globals,\n            iconName: \"ChevronRight100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-chevron\",\n            ],\n          })\n        : ''}\n      ${isChecked\n        ? Icon({\n            ...globals,\n            iconName: \"Checkmark100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-checkmark\",\n            ],\n          })\n        : ''}\n      ${isCollapsible && items.length > 0 ? Template({ ...globals, items, isOpen, size }) : ''}\n    </li>\n  `;\n\nexport const MenuGroup = ({\n  heading,\n  id,\n  idx = 0,\n  items = [],\n  isDisabled = false,\n  isSelectable = false,\n  subrole,\n  size,\n  ...globals\n}) => html`\n    <li\n      id=${ifDefined(id)}\n      role=\"presentation\">\n      ${heading\n        ? html`<span\n            class=\"spectrum-Menu-sectionHeading\"\n            id=${id ?? `menu-heading-category-${idx}`}\n            aria-hidden=\"true\"\n            >${heading}</span\n          >`\n        : \"\"}\n      ${Template({\n        ...globals,\n        role: \"group\",\n        subrole,\n        labelledby: id,\n        items,\n        isDisabled,\n        isSelectable,\n        size,\n      })}\n    </li>\n  `;\n\nexport const Template = ({\n  rootClass = \"spectrum-Menu\",\n  labelledby,\n  customClasses = [],\n  customStyles = {},\n  size,\n  isDisabled = false,\n  isSelectable = false,\n  isOpen = false,\n  items = [],\n  role = \"menu\",\n  subrole = \"menuitem\",\n  id,\n  ...globals\n}) => {\n  return html`\n    <ul\n      class=${classMap({\n        [rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n        \"is-selectable\": isSelectable,\n        \"is-open\": isOpen,\n        ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n      })}\n      id=${ifDefined(id)}\n      role=${ifDefined(role)}\n      aria-labelledby=${ifDefined(labelledby)}\n      aria-disabled=${isDisabled ? \"true\" : \"false\"}\n      style=${styleMap(customStyles)}\n    >\n      ${repeat(items, (i) => {\n        if (i.type === \"divider\")\n          return Divider({\n            ...globals,\n            tag: \"li\",\n            size: \"s\",\n            customClasses: [`${rootClass}-divider`],\n          });\n        else if (i.heading) return MenuGroup({ ...i, ...globals, subrole, size });\n        else\n          return MenuItem({\n            ...globals,\n            ...i,\n            rootClass: `${rootClass}-item`,\n            role: subrole,\n            size,\n          });\n      })}\n    </ul>\n  `;\n};\n"],"names":[],"sourceRoot":""}